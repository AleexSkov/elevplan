@page "/min-elevplan"                   
<!-- Rute til siden -->

@using Core.Models                      
<!-- Gør model-klasser som Elevplan og Praktikperiode tilgængelige -->
@using System.Net.Http.Json
@inject HttpClient Http                 
<!-- Bruges til at hente elevens data fra API'et -->
@inject IJSRuntime JS                   
<!-- Bruges til at læse elevId fra localStorage -->

<!-- Hele siden ombrydes af elevplan-container -->
<div class="elevplan-container">

    <!-- Topbar (evt. kan du fjerne, hvis du ikke ønsker en topbar) -->
    <div class="topbar">
        <div class="topbar-content">
            <h1>Min Elevplan</h1>
            <!-- Her kan du tilføje knapper eller dropdowns, hvis du ønsker -->
            <div class="topbar-actions">
                <!-- Eksempel på en knap i topbaren -->
                <button class="new-button">
                    <i class="bi bi-plus-lg"></i>
                    Ny plan
                </button>
            </div>
        </div>
    </div>

    <!-- Main content -->
    <div class="main-content">

        <!-- Elev Header: navn, skole, aftaleform -->
        @if (plan is null)
        {
            <p class="loading">Indlæser din elevplan…</p>
        }
        else
        {
            <div class="elev-header">
                <div class="elev-title">
                    <i class="bi bi-person-circle"></i>
                    <h2>@plan.ElevNavn</h2>
                </div>
                <div class="elev-info">
                    <div class="info-item">
                        <i class="bi bi-building"></i>
                        <span class="label">Skole:</span>
                        <span>@plan.Skole</span>
                    </div>
                    <div class="info-item">
                        <i class="bi bi-journal-text"></i>
                        <span class="label">Aftaleform:</span>
                        <span>@plan.Aftaleform</span>
                    </div>
                </div>
            </div>

            <!-- Periode‐valg -->
            <div class="period-header">
                <label for="periode-select" class="form-label"><strong>Vælg periode:</strong></label>
                <select id="periode-select" @onchange="OnPeriodChanged" class="form-select elev-selector">
                    @foreach (var p in plan.Praktikperioder)
                    {
                        <option value="@p.PeriodeNummer">
                            Periode @p.PeriodeNummer (@p.VarighedUger uger)
                        </option>
                    }
                </select>
            </div>

            @if (selectedPeriod != null)
            {
                <div class="tab-content">
                    <h3 class="period-title">Delmål for Periode @selectedPeriod.PeriodeNummer</h3>
                    <div class="tasks-list">
                        @foreach (var delmaal in selectedPeriod.Opgaver)
                        {
                            <div class="task @(delmaal.Gennemført ? "status-completed" : "status-pending")">
                                <div class="task-status">
                                    @if (delmaal.Gennemført)
                                    {
                                        <i class="bi bi-check-circle-fill"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-clock-fill"></i>
                                    }
                                </div>
                                <div class="task-content">
                                    <div class="task-title">
                                        <strong>@delmaal.Kategori:</strong> @delmaal.Beskrivelse
                                    </div>
                                    <div class="task-details">
                                        <div><strong>Ansvarlig:</strong> @delmaal.Ansvarlig</div>
                                        <div><strong>Initiator:</strong> @delmaal.Initiator</div>
                                        <div><strong>Deadline:</strong> @delmaal.Tidslinje</div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }

    </div> <!-- /.main-content -->

</div> <!-- /.elevplan-container -->

@code {
    private Elevplan? plan;                              // Hele elevens praktikplan
    private Praktikperiode? selectedPeriod;              // Den valgte praktikperiode

    /// <summary>
    /// Henter elevens elevplan ud fra id, som er gemt i localStorage.
    /// Viser automatisk første periode som valgt.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        var elevId = await JS.InvokeAsync<string>("localStorage.getItem", "elevId");
        if (!string.IsNullOrEmpty(elevId))
        {
            plan = await Http.GetFromJsonAsync<Elevplan>($"/api/elevplaner/{elevId}");
            selectedPeriod = plan?.Praktikperioder.FirstOrDefault();
        }
    }

    /// <summary>
    /// Skifter den viste periode ud fra brugerens valg i dropdown.
    /// </summary>
    private void OnPeriodChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var num))
        {
            selectedPeriod = plan?.Praktikperioder.FirstOrDefault(p => p.PeriodeNummer == num);
        }
    }
}
