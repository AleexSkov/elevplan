@page "/DashboardAdmin"
@layout MainLayout

@using System
@using System.Linq
@using System.Collections.Generic
@using Core.Models
@using ComwellElevplan.Components
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components

@inject HttpClient Http

<h3>Admin Dashboard</h3>

<div class="mb-3 d-flex align-items-center">
    <input class="form-control me-2" placeholder="Søg efter navn..." @bind="searchTerm" />
    <button class="btn btn-outline-secondary me-2" @onclick="ToggleSort">
        @if (!sortByCompleted)
        {
            <span>Sorter efter: Flest gennemførte</span>
        }
        else
        {
            <span>Sorter efter: Navn (A-Z)</span>
        }
    </button>
    <span class="text-muted">(Tryk for at skifte sortering)</span>
</div>

<table class="table">
    <thead>
        <tr>
            <th>ElevId</th>
            <th>Navn</th>
            <th>Gennemført</th>
            <th>Handling</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var elev in DisplayedElever)
    {
        <tr>
            <td>@elev.ElevId</td>
            <td>@elev.ElevNavn</td>
            <td>@TotalCompleted(elev)</td>
            <td>
                <button class="btn btn-sm btn-primary" @onclick="() => OpenModal(elev.ElevId)">
                    Se plan
                </button>
            </td>
        </tr>
    }
    </tbody>
</table>

@if (showModal)
{
    <ElevplanModal ElevId="@selectedId"
                   IsAdmin="true"
                   OnClose="() => showModal = false" />
}

@code {
    private List<Elevplan> elever = new();
    private string searchTerm = string.Empty;
    private bool sortByCompleted = false;
    private bool showModal = false;
    private string selectedId = string.Empty;

    private IEnumerable<Elevplan> DisplayedElever =>
        (elever ?? new List<Elevplan>())
        .Where(e => string.IsNullOrWhiteSpace(searchTerm)
            || e.ElevNavn.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .OrderByDescending(e => sortByCompleted ? TotalCompleted(e) : 0)
        .ThenBy(e => sortByCompleted ? string.Empty : e.ElevNavn);

    protected override async Task OnInitializedAsync()
    {
        elever = await Http.GetFromJsonAsync<List<Elevplan>>("/api/elevplaner");
    }

    private int TotalCompleted(Elevplan e) =>
        e.Praktikperioder?
         .SelectMany(p => p.Opgaver)
         .Count(d => d.Gennemført) ?? 0;

    private void ToggleSort()
    {
        sortByCompleted = !sortByCompleted;
    }

    private Task OpenModal(string id)
    {
        selectedId = id;
        showModal = true;
        return Task.CompletedTask;
    }
}
