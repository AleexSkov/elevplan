
@using System.Net.Http.Json
@using Core.Models
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS

<h3>Log ind</h3>

<!-- Formular til login med email og adgangskode -->
<EditForm Model="credentials" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Email</label>
<!-- Inputfelt til emailadresse -->
        <InputText @bind-Value="credentials.Email" class="form-control" />
    </div>
    <div class="mb-3">
        <label>Adgangskode</label>
<!-- Inputfelt til adgangskode -->
        <InputText @bind-Value="credentials.Password" type="password" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Log ind</button>
</EditForm>

@if (!string.IsNullOrEmpty(error))
{
<!-- Fejlbesked ved mislykket login -->
    <div class="alert alert-danger mt-3">@error</div>
}

@code {
    /// <summary>
/// Loginoplysninger brugeren indtaster
    /// </summary>
    private LoginModel credentials = new();
    // credentials en objekt/instans af typen LoginModel
    private string? error; // gem fejlbesked 
    // v til at gemme fejl beskeder 
    
    /// <summary> 
/// Sender login-data til API og håndterer svar, m kaldes når formularen valideres og log in knappen klikkes 
    /// </summary>
    private async Task HandleLogin()
    {
        // STEP 1: Sender login-info til AuthController -> se ServerApi/Controllers/AuthController.cs
        var resp = await Http.PostAsJsonAsync("api/auth/login", credentials);
        // tjek om login lykkedes
        if (!resp.IsSuccessStatusCode)
        {
            // hent fejlbesked
            error = await resp.Content.ReadAsStringAsync();
            return; // afslut metoden
        }

        // Hvis succes, læs loginrespons 
        var result = await resp.Content.ReadFromJsonAsync<LoginResponse>();

        
        if (result is null)
        {
            // hvis null,sæt en general fejlbesked 
            error = "Noget gik galt med login.";
            return;
        }

        // Gem relevante oplysninger i localStorage
        await JS.InvokeVoidAsync("localStorage.setItem", "userName", result.Name);
        await JS.InvokeVoidAsync("localStorage.setItem", "userRole", result.Role);
        await JS.InvokeVoidAsync("localStorage.setItem", "mustChangePassword", result.MustChangePassword.ToString());

        // Hvis brugeren er Elev, gem ElevId
        // STEP 3: Her bliver Elevid gemt i local storage til implementation i dashboardelev
        if (result.ElevId is not null)
        {
            await JS.InvokeVoidAsync("localStorage.setItem", "elevId", result.ElevId);
        }

        // Hvis brugeren skal ændre kode ved første login – navigér til ChangePassword siden mustChangePassword er true
        if (result.MustChangePassword)
        {
            Nav.NavigateTo("/changepassword");
            return;
        }

        if (result.Role == "Admin") 
        {
            Nav.NavigateTo("/DashboardAdmin");
        }
        // STEP 3: går til Dashboard -> se DashboardElev.razor
        else if (result.Role == "Elev") 
        {
            Nav.NavigateTo("/Dashboard");
        }
       
    }
//AuthController
// AppUserRepository
}
    

    